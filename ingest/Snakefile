"""
This is the main ingest Snakefile that orchestrates the full ingest workflow
and defines its default outputs.
"""
# Utility functions shared across all workflows.
include: "../shared/vendored/snakemake/config.smk"

# Use default configuration values. Extend with Snakemake's --configfile/--config options.
configfile: os.path.join(workflow.basedir, "defaults/config.yaml")

# Use custom configuration from analysis directory (i.e. working dir), if any.
if os.path.exists("config.yaml"):
    configfile: "config.yaml"


include: "rules/fetch_from_ncbi.smk"
include: "rules/curate.smk"


rule all:
    input:
        "results/sequences.fasta",
        "results/metadata.tsv",

# Allow users to import custom rules provided via the config.
# This allows users to run custom rules that can extend or override the workflow.
# A concrete example of using custom rules is the extension of the workflow with
# rules to support the Nextstrain automation that uploads files and sends internal
# Slack notifications.
# For extensions, the user will have to specify the custom rule targets when
# running the workflow.
# For overrides, the custom Snakefile will have to use the `ruleorder` directive
# to allow Snakemake to handle ambiguous rules
# https://snakemake.readthedocs.io/en/stable/snakefiles/rules.html#handling-ambiguous-rules
if "custom_rules" in config:
    for rule_file in config["custom_rules"]:
        # Relative custom rule paths in the config are relative to the analysis
        # directory (i.e. the current working directory, or workdir, usually
        # given by --directory), but the "include" directive treats relative
        # paths as relative to the workflow (e.g. workflow.current_basedir).
        # Convert to an absolute path based on the analysis/current directory
        # to avoid this mismatch of expectations.
        include: os.path.join(os.getcwd(), rule_file)
